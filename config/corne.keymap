/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keys_se.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        backspace: backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };

        test: test {
            compatible = "zmk,behavior-hold-tap";
            label = "TEST";
            bindings = <&mt>, <&out>;

            #binding-cells = <2>;
            tapping-term-ms = <1>;
        };

        right_sys: right_sys {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_SYS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        left_sys: left_sys {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_SYS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    macros {
        stashtab: stashtab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LGUI &kp FSLH>;
            label = "STASHTAB";
        };

        channeltab: channeltab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LCTRL &kp K>;
            label = "CHANNELTAB";
        };

        printscreen: printscreen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LGUI &kp PRINTSCREEN>;
            label = "PRINTSCREEN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE        &kp Q                 &kp W  &kp E            &kp R  &kp T        &kp Y       &kp U                   &kp I         &kp O       &kp P                       &kp SE_A_RING
&kp TAB           &left_sys LEFT_GUI A  &kp S  &kp D            &kp F  &kp G        &kp H       &kp J                   &kp K         &kp L       &left_sys LGUI SE_O_UMLAUT  &kp SE_A_UMLAUT
&kp LEFT_CONTROL  &kp Z                 &kp X  &kp C            &kp V  &kp B        &kp N       &kp M                   &kp SE_COMMA  &kp SE_DOT  &kp SE_MINUS                &kp RIGHT_SHIFT
                                               &kp RIGHT_SHIFT  &mo 1  &kp SPACE    &kp RETURN  &backspace 2 BACKSPACE  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB           &kp EXCL      &kp AT            &kp HASH                 &kp SE_DOLLAR   &kp PRCNT       &kp SE_AMPERSAND  &kp SE_SLASH         &kp KP_MULTIPLY  &kp RA(N7)  &kp RA(N0)  &kp BSPC
&kp SE_BACKSLASH  &kp SE_TILDE  &trans            &trans                   &stashtab       &channeltab     &kp MINUS         &kp EQUAL            &kp RA(N2)       &kp RA(N8)  &kp RA(N9)  &kp BACKSLASH
&kp LCTRL         &kp SE_PIPE   &kp SE_LESS_THAN  &kp RA(SE_GREATER_THAN)  &kp RS(INSERT)  &printscreen    &kp SE_QUESTION   &kp SE_SINGLE_QUOTE  &kp RS(DOT)      &kp RS(N8)  &kp RS(N9)  &kp RIGHT_SHIFT
                                                  &kp LGUI                 &trans          &kp SPACE       &kp RET           &trans               &kp RALT
            >;
        };
    };
};
